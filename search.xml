<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexon的使用</title>
    <url>/2023/12/29/Hexon%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<blockquote>
<p>好久没用Hexo写博客了，笔者准备寒假时更新一波洛谷的题解，但由于用命令行写博客很不方便，于是找到了Hexon这款图形化Hexo博客部署工具（</p>
</blockquote>
<h2 id="安装">1. 安装</h2>
<p>这一步很简单，在确保自己的Hexo安装正确后，执行以下命令即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/gethexon/hexon --depth 1</span><br><span class="line"><span class="built_in">cd</span> hexon</span><br><span class="line">pnpm install</span><br><span class="line">pnpm run setup</span><br></pre></td></tr></table></figure>
<p>此时要输入Hexo博客的路径，并设置用户名、密码。</p>
<p><img
src="https://www.freeimg.cn/i/2025/01/11/67825386ef571.webp" /></p>
<h2 id="启动和使用">2. 启动和使用</h2>
<p>运行<code>pnpm start</code>,打开<a
href="http://localhost:5777">服务器</a>,用<strong>输出消息中的</strong>用户名和你设置的密码（不要用你之前设的用户名，有bug）</p>
<p>进入主页后就可以新建管理文章和页面等等，可以一键部署/清理/生成，还可以在这里写文章，连md编辑器都省了。</p>
<hr />
<p>其实笔者也刚刚开始使用这款工具，<del>这条博客是测试用的</del>，后续如果有什么更加有趣的玩法我会随时更新。</p>
<hr />
<p>The END</p>
]]></content>
      <tags>
        <tag>计算机工具</tag>
      </tags>
  </entry>
  <entry>
    <title>P2021 faebdc玩扑克</title>
    <url>/2024/01/01/P2021-faebdc%E7%8E%A9%E6%89%91%E5%85%8B/</url>
    <content><![CDATA[<h2 id="题目描述">1. 题目描述</h2>
<blockquote>
<p>zky 有 <span class="math inline">\(n\)</span> 个扑克牌，编号从 <span
class="math inline">\(1\)</span> 到 <span
class="math inline">\(n\)</span>，zky
把它排成一个序列，每次把最上方的扑克牌放在牌堆底，然后把下一张扑克牌拿出来输出，最终输出的序列恰好是从
<span class="math inline">\(1\)</span> 到 <span
class="math inline">\(n\)</span>，faebdc 问你原序列是什么，因为 faebdc
神犇早已在 <span class="math inline">\(\mathcal O (1)\)</span>
的时间得出结果，如果你在 1 s 内答不出来，faebdc 会吃了你。 对于 <span
class="math inline">\(100\%\)</span> 的数据，<span
class="math inline">\(1 \le n \le {10}^6\)</span>。</p>
<p>原题链接：<a href="https://www.luogu.com.cn/problem/P2021"
class="uri">https://www.luogu.com.cn/problem/P2021</a></p>
</blockquote>
<h2 id="思路">2. 思路</h2>
<p>此题的数据范围为 <span
class="math inline">\(10^6\)</span>，所以应该用 <span
class="math inline">\(\mathcal O(n)\)</span>
级别的算法来解决。一开始比较容易想到的是使用数学方法进行推导，但是似乎有点复杂。考虑使用队列进行模拟，队列中储存的是答案在数组中的<strong>下标</strong>，每次输出就将数组中对应下标的答案设为当前应输出的数字（1~n）。这样即可解决问题。</p>
<p>建立一个数组 <span
class="math inline">\(C\)</span>，表示整个扑克牌序列，一个队列 <span
class="math inline">\(Q\)</span>，用于模拟整个过程，其中每个成员 <span
class="math inline">\(i\)</span> 表示第 <span
class="math inline">\(i\)</span> 张扑克牌。将 <span
class="math inline">\(cnt\)</span> 初始赋值为 <span
class="math inline">\(1\)</span>。循环直到队列为空，每一次都将队首置于队尾，并取出第二个队首
<span class="math inline">\(k\)</span>，将 <span
class="math inline">\(C_k\)</span> 设为 <span
class="math inline">\(cnt\)</span>，且递增 <span
class="math inline">\(cnt\)</span>。循环结束后顺次输出数组 <span
class="math inline">\(C\)</span> 即可。</p>
<h2 id="代码">3. 代码</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> c[<span class="number">1000005</span>];</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        q.<span class="built_in">push</span>(i);</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        q.<span class="built_in">push</span>(q.<span class="built_in">front</span>());</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        c[q.<span class="built_in">front</span>()] = cnt++;</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        cout &lt;&lt; c[i] &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="复杂度分析">4. 复杂度分析</h2>
<p>时间复杂度：<span class="math inline">\(\mathcal O(n)\)</span></p>
<p>空间复杂度：<span class="math inline">\(\mathcal O(n)\)</span></p>
<hr />
<p>The END</p>
]]></content>
      <tags>
        <tag>OI</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux配置oh-my-zsh的步骤</title>
    <url>/2022/11/20/demo/</url>
    <content><![CDATA[<h2 id="安装zshoh-my-zsh">1. 安装zsh，oh-my-zsh</h2>
<ul>
<li><p>首先安装zsh：<code>sudo apt install zsh</code></p></li>
<li><p>然后安装oh-my-zsh：<code>sh -c "$(wget https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh -O -)"</code></p></li>
</ul>
<h2 id="安装插件">2. 安装插件</h2>
<ul>
<li><p>安装高亮插件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.oh-my-zsh/custom/plugins/</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting.git</span><br></pre></td></tr></table></figure></li>
<li><p>安装主题插件：<code>git clone --depth=1 https://github.com/romkatv/powerlevel10k.git $&#123;ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom&#125;/themes/powerlevel10k</code></p></li>
<li><p>将设置应用到.zshrc：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">### ................ ###</span></span><br><span class="line">ZSH_THEME=<span class="string">&quot;powerlevel10k/powerlevel10k&quot;</span></span><br><span class="line"><span class="comment">### ................ ###</span></span><br><span class="line">plugins = (git <span class="built_in">sudo</span> zsh-syntax-highlighting)</span><br><span class="line"><span class="comment">### ................ ###</span></span><br><span class="line"><span class="built_in">source</span> ~/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>py2exe使用教程</title>
    <url>/2023/03/25/py2exe/</url>
    <content><![CDATA[<p>py2exe是一个方便的工具，可以将Python程序转化为可以再Windows上直接运行的exe文件，适用于将Python程序分享给没有安装Python解释器用户。下面由我带大家了解一下py2exe的使用。</p>
<h2
id="日更新推荐使用pyinstaller">3.26日更新：推荐使用pyinstaller！！！</h2>
<p>这两天笔者又发现了另一个python包，叫做pyinstaller，真的超好用。</p>
<p>安装：<code>pip install pyinstaller</code></p>
<p>使用：<code>pyinstaller --onefile main.py</code></p>
<p>众所周知，py2exe打包的程序需要带着<code>dist</code>文件夹一起执行，而pyinstaller直接提供了<code>--onefile</code>这一选项！打包后，<code>dist</code>文件夹里的exe可以单独使用，其余的文件可以直接删除！</p>
<p>而且，pyinstaller不需要编写<code>setup.py</code>，只需1个命令就可以搞定。</p>
<p>它的缺点是不能打包更复杂的程序，比如我曾经写的外星人游戏。但是新手时期的控制台程序完全可以用它搞定。</p>
<h2 id="一-安装py2exe">一、 安装py2exe</h2>
<ol type="1">
<li>使用Win+R快捷键打开运行窗口，输入cmd，回车。</li>
</ol>
<p><img
src="https://www.freeimg.cn/i/2025/01/11/6782535014509.webp" /></p>
<ol type="1">
<li><p>检查Python和pip版本（版本可能与我的不同，只要不报错就可以）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Users\yixun&gt;python --version</span><br><span class="line">Python 3.10.5</span><br><span class="line"></span><br><span class="line">C:\Users\yixun&gt;pip --version</span><br><span class="line">pip 22.0.4 from C:\Users\yixun\AppData\Local\Programs\Python\Python310\lib\site-packages\pip (python 3.10)</span><br></pre></td></tr></table></figure></li>
<li><p>安装py2exe：<code>pip install py2exe</code></p></li>
</ol>
<h2 id="二使用py2exe">二、使用py2exe</h2>
<ol type="1">
<li><p>首先将cmd切换到你的文件夹里，比如<code>cd C:\Users\yixun\Desktop\Code</code>。安装了Windows终端的读者也可以在文件夹里右击，然后这样：</p>
<p><img
src="https://www.freeimg.cn/i/2025/01/11/6782535087359.webp" /></p></li>
<li><p>创建一个测试用的Python程序，比如经典的废话程序“身高计算器”：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;你的身高是：&quot;</span> + <span class="built_in">input</span>(<span class="string">&quot;请输入你的身高：&quot;</span>))</span><br><span class="line"><span class="built_in">input</span>()   <span class="comment">#防止输出太快窗口直接关闭，建议每个要转成exe的程序都添加这一句话</span></span><br></pre></td></tr></table></figure>
<p>可以命名为<code>main.py</code></p></li>
<li><p>接下来，创建一个新的Python程序，可以命名为<code>setup.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> distutils.core <span class="keyword">import</span> setup</span><br><span class="line"><span class="keyword">import</span> py2exe</span><br><span class="line"></span><br><span class="line">sys.argv.append(<span class="string">&#x27;py2exe&#x27;</span>)</span><br><span class="line">setup(console=[<span class="string">&quot;main.py&quot;</span>]) <span class="comment"># 与你的程序文件名匹配</span></span><br></pre></td></tr></table></figure>
<p>注意，所有命名都不是强制性的，可以随意更改。</p></li>
<li><p>双击运行<code>setup.py</code></p></li>
<li><p>这会生成一个名叫<code>dist</code>的子目录，注意如果要把exe分享给别人，dist目录要一起分享。</p></li>
<li><p>打开dist目录中的main.exe，成功运行，最后按Enter可以退出程序。</p></li>
</ol>
<blockquote>
<p>如有疑问，请联系yixun2010@outlook.com</p>
</blockquote>
<hr />
<p>The END</p>
]]></content>
      <tags>
        <tag>计算机工具</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>P8712 [蓝桥杯 2020 省 B1] 整数拼接</title>
    <url>/2025/01/13/P8712-%E8%93%9D%E6%A1%A5%E6%9D%AF-2020-%E7%9C%81-B1-%E6%95%B4%E6%95%B0%E6%8B%BC%E6%8E%A5/</url>
    <content><![CDATA[<h2 id="题目描述">1.题目描述</h2>
<blockquote>
<p>给定一个长度为 <span class="math inline">\(n\)</span> 的数组 <span
class="math inline">\(A_1,A_2,\cdots,A_n\)</span>。你可以从中选出两个数
<span class="math inline">\(A_i\)</span> 和 <span
class="math inline">\(A_j\)</span>（<span class="math inline">\(i\neq
j\)</span>），然后将 <span class="math inline">\(A_i\)</span> 和 <span
class="math inline">\(A_j\)</span> 一前一后拼成一个新的整数。例如
<code>12</code> 和 <code>345</code> 可以拼成 <code>12345</code> 或
<code>34512</code>。注意交换 <span class="math inline">\(A_i\)</span> 和
<span class="math inline">\(A_j\)</span> 的顺序总是被视为 <span
class="math inline">\(2\)</span> 种拼法，即便是 <span
class="math inline">\(A_i=A_j\)</span> 时。</p>
<p>请你计算有多少种拼法满足拼出的整数是 <span
class="math inline">\(K\)</span> 的倍数。</p>
<p>原题链接：<a href="https://www.luogu.com.cn/problem/P8712"
class="uri">https://www.luogu.com.cn/problem/P8712</a></p>
</blockquote>
<h2 id="思路">2.思路</h2>
<p>由于 <span class="math inline">\(1 \le n \le
10^5\)</span>，使用时间复杂度为 <span class="math inline">\(\mathcal
O(n^2)\)</span>
的算法枚举每种拼接显然不可行。面对这个问题，我们需要一种储存数组 <span
class="math inline">\(A\)</span> 中信息的方法，可以让我们在每次遍历
<span class="math inline">\(A_i\)</span> 时以较少的时间复杂度得知能与
<span class="math inline">\(A_i\)</span> 拼接的整数个数。</p>
<p>设数组中两个元素 <span class="math inline">\(A_j\)</span> 和 <span
class="math inline">\(A_i\)</span> 的数字位数分别为 <span
class="math inline">\(v\)</span> 和 <span
class="math inline">\(u\)</span>，因为拼接后的数是 <span
class="math inline">\(K\)</span> 的倍数，所以有 <span
class="math inline">\(A_j \cdot 10^u + A_i \equiv 0 \pmod K\)</span>，即
<span class="math inline">\(A_j \cdot 10^u \equiv -A_i \pmod
K\)</span>。由于 <span class="math inline">\(A_i \le 10^9\)</span>，即
<span class="math inline">\(A_i\)</span> 最多有十位，我们可以开 <span
class="math inline">\(10\)</span> 个哈希表，对于第 <span
class="math inline">\(p\)</span> 个哈希表，存储 <span
class="math inline">\(A_i \cdot 10^u \mod K\)</span>
的每个值出现的次数。这样我们在遍历时就能用哈希表里的值进行快速相加了。</p>
<h2 id="注意事项">3.注意事项</h2>
<ul>
<li><p>由于 <span class="math inline">\(K \le
10^5\)</span>，我们把两个模 <span class="math inline">\(K\)</span>
的余数相乘时会超出<code>int</code>的范围。此外拼接方法的总数在极限情况下也会超出<code>int</code>的范围。所以记得开<code>long long</code>。</p></li>
<li><p>按以上方法计算会多算到自己与自己拼接的情况。所以当 <span
class="math inline">\(A_i \cdot 10^u + A_i \equiv 0 \pmod K\)</span>
时，要把答案减 <span class="math inline">\(1\)</span>。</p></li>
<li><p>可以用<code>log10(x) + 1</code>快速计算 <span
class="math inline">\(x\)</span> 的数字位数。</p></li>
</ul>
<h2 id="代码">4.代码</h2>
<p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> n, k, a[N];</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> pw[<span class="number">11</span>]; <span class="comment">// 10^u % k</span></span><br><span class="line">unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; mp[<span class="number">11</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line"></span><br><span class="line">    cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    pw[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++)</span><br><span class="line">        pw[i] = (pw[i<span class="number">-1</span>] * <span class="number">10</span>) % k;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">10</span>; j++)</span><br><span class="line">            mp[j][a[i] * pw[j] % k]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> len = <span class="built_in">log10</span>(a[i]) + <span class="number">1</span>, mod = (k - a[i] % k) % k; <span class="comment">// mod等价于数学上的-a[i] mod k</span></span><br><span class="line">        ans += mp[len][mod];</span><br><span class="line">        <span class="keyword">if</span> (a[i] * pw[len] % k == mod)</span><br><span class="line">            ans--;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="复杂度分析">5.复杂度分析</h2>
<p>时间复杂度：<span class="math inline">\(\mathcal O(n \log_{10} \max
A_i)\)</span></p>
<hr />
<p>The End</p>
]]></content>
  </entry>
  <entry>
    <title>【模板】后缀数组（仅代码）</title>
    <url>/2025/01/16/%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84%EF%BC%88%E4%BB%85%E4%BB%A3%E7%A0%81%EF%BC%89/</url>
    <content><![CDATA[<h2 id="定义">1.定义</h2>
<p><span class="math inline">\(sa_i\)</span>：字典序排名为 <span
class="math inline">\(i\)</span> 的后缀，其首字符下标为 <span
class="math inline">\(sa_i\)</span>。</p>
<p><span class="math inline">\(rk_i\)</span>：首字符下标为 <span
class="math inline">\(i\)</span> 的后缀，其字典序排名为 <span
class="math inline">\(rk_i\)</span>。（显然 <span
class="math inline">\(sa_{rk_i} = i\)</span>）</p>
<p><span class="math inline">\(h_i\)</span>：<span
class="math inline">\(sa_i\)</span> 与 <span
class="math inline">\(sa_{i-1}\)</span>
所表示的后缀的最长公共前缀的长度。（满足 <span
class="math inline">\(h_{rk_i} \ge h_{rk_{i-1}}-1\)</span>）</p>
<h2 id="代码">2.代码</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span> + <span class="number">5</span>, M = <span class="number">200</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">char</span> a[N];</span><br><span class="line"><span class="type">int</span> sa[N*<span class="number">2</span>], rk[N*<span class="number">2</span>], rk0[N*<span class="number">2</span>], cnt[M], id[N*<span class="number">2</span>], h[N*<span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> pos = <span class="number">0</span>, ans = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    cin.<span class="built_in">getline</span>(a+<span class="number">1</span>, N);</span><br><span class="line">    n = <span class="built_in">strlen</span>(a+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> m = <span class="number">128</span>, i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        cnt[rk[i] = a[i]]++;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">        cnt[i] += cnt[i - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (i = n; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">        sa[cnt[rk[i]]--] = i;</span><br><span class="line">    <span class="type">int</span> p = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> len = <span class="number">1</span>; p &lt; n; len *= <span class="number">2</span>, m = p) &#123;</span><br><span class="line">        p = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = n - len + <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            id[p++] = i;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            <span class="keyword">if</span> (sa[i] &gt; len)</span><br><span class="line">                id[p++] = sa[i] - len;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= m; i++)</span><br><span class="line">            cnt[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            cnt[rk[i]]++;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">            cnt[i] += cnt[i - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (i = n; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">            sa[cnt[rk[id[i]]]--] = id[i];</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= n; i++)</span><br><span class="line">            rk0[i] = rk[i];</span><br><span class="line">        p = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (rk0[sa[i]] == rk0[sa[i - <span class="number">1</span>]] &amp;&amp; rk0[sa[i] + len] == rk0[sa[i - <span class="number">1</span>] + len])</span><br><span class="line">                rk[sa[i]] = p;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                rk[sa[i]] = ++p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, k = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (k) k--;</span><br><span class="line">        <span class="keyword">while</span> (a[i+k] == a[sa[rk[i]<span class="number">-1</span>]+k]) k++;</span><br><span class="line">        h[rk[i]] = k;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        cout &lt;&lt; sa[i] &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        cout &lt;&lt; h[i] &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>字符串下标从 <span class="math inline">\(1\)</span> 开始。</p>
]]></content>
      <tags>
        <tag>OI</tag>
      </tags>
  </entry>
  <entry>
    <title>【模版】一些字符串函数（仅代码）</title>
    <url>/2025/01/16/%E3%80%90%E6%A8%A1%E7%89%88%E3%80%91%E4%B8%80%E4%BA%9B%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%87%BD%E6%95%B0%EF%BC%88%E4%BB%85%E4%BB%A3%E7%A0%81%EF%BC%89-1/</url>
    <content><![CDATA[<h2 id="kmp前缀函数">KMP（前缀函数）</h2>
<h3 id="定义">定义：</h3>
<p><span class="math inline">\(bd_i\)</span>：对于字符串 <span
class="math inline">\(s\)</span>，使 <span class="math inline">\(s_{0
\dots bd_{i}-1} = s_{i-bd_{i}+1 \dots i}\)</span> 成立的最大值。</p>
<h3 id="代码">代码：</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">	<span class="type">int</span> j = bd[i<span class="number">-1</span>];</span><br><span class="line">	<span class="keyword">while</span> (j &amp;&amp; s[i] != s[j]) j = bd[j<span class="number">-1</span>];</span><br><span class="line">	<span class="keyword">if</span> (s[i] == s[j]) j++;</span><br><span class="line">	bd[i] = j;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>字符串下标从 <span class="math inline">\(0\)</span> 开始。</p>
<h2 id="exkmpz函数">exKMP（Z函数）</h2>
<h3 id="定义-1">定义：</h3>
<p><span class="math inline">\(z_i\)</span>：字符串 <span
class="math inline">\(s\)</span> 与 <span
class="math inline">\(s\)</span> 以 <span
class="math inline">\(i\)</span> 为起始的后缀的最长公共前缀。</p>
<h3 id="代码-1">代码：</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">getZ</span><span class="params">(<span class="type">const</span> string&amp; s, <span class="type">int</span> z[])</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n = s.<span class="built_in">size</span>(), l = <span class="number">0</span>, r = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> k = (i &gt; r) ? <span class="number">0</span> : <span class="built_in">min</span>(z[i-l], r-i+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">while</span> (i+k &lt; n &amp;&amp; s[i+k] == s[k]) k++;</span><br><span class="line">        z[i] = k;</span><br><span class="line">        <span class="keyword">if</span> (i+k<span class="number">-1</span> &gt; r)</span><br><span class="line">            l = i, r = i+k<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    z[<span class="number">0</span>] = n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>字符串下标从 <span class="math inline">\(0\)</span> 开始。</p>
<h2 id="manacher">Manacher</h2>
<h3 id="定义-2">定义：</h3>
<p><span class="math inline">\(d_{1i}\)</span>：以 <span
class="math inline">\(i\)</span> 为中心的奇回文串的最大半径。</p>
<p><span class="math inline">\(d_{2i}\)</span>：以 <span
class="math inline">\(i-1\)</span> 和 <span
class="math inline">\(i\)</span> 为中心的偶回文串的最大半径。</p>
<p><span class="math inline">\(len\)</span>：所求的答案之一，<span
class="math inline">\(s\)</span> 中最长回文串的长度。</p>
<h3 id="代码-2">代码：</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> n = s.<span class="built_in">size</span>();</span><br><span class="line"><span class="type">int</span> len = <span class="number">0</span>, nl = <span class="number">0</span>, nr = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, l = <span class="number">0</span>, r = <span class="number">-1</span>; i &lt; n; i++) &#123;</span><br><span class="line">	<span class="type">int</span> k = (i&gt;r) ? <span class="number">1</span> : <span class="built_in">min</span>(d1[l+r-i], r-i+<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">while</span> (<span class="number">0</span>&lt;=i-k &amp;&amp; i+k&lt;n &amp;&amp; s[i-k]==s[i+k]) k++;</span><br><span class="line">	d1[i] = k--;</span><br><span class="line">	<span class="keyword">if</span> (i+k&gt;r)</span><br><span class="line">		l = i-k, r = i+k;</span><br><span class="line">	<span class="keyword">if</span> (r-l+<span class="number">1</span> &gt; len)</span><br><span class="line">		len = r-l+<span class="number">1</span>, nl = l, nr = r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, l = <span class="number">0</span>, r = <span class="number">-1</span>; i &lt; n; i++) &#123;</span><br><span class="line">  	<span class="type">int</span> k = (i&gt;r) ? <span class="number">0</span> : <span class="built_in">min</span>(d2[l+r-i+<span class="number">1</span>], r-i+<span class="number">1</span>);</span><br><span class="line">  	<span class="keyword">while</span> (<span class="number">0</span>&lt;=i-k<span class="number">-1</span> &amp;&amp; i+k&lt;n &amp;&amp; s[i-k<span class="number">-1</span>]==s[i+k])k++;</span><br><span class="line">  	d2[i] = k--;</span><br><span class="line">  	<span class="keyword">if</span> (i+k&gt;r)</span><br><span class="line">   		l = i-k<span class="number">-1</span>, r = i+k;</span><br><span class="line">   	<span class="keyword">if</span> (r-l+<span class="number">1</span> &gt; len)</span><br><span class="line">   		len = r-l+<span class="number">1</span>, nl = l, nr = r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>字符串下标从 <span class="math inline">\(0\)</span> 开始。</p>
]]></content>
      <tags>
        <tag>OI</tag>
      </tags>
  </entry>
</search>
